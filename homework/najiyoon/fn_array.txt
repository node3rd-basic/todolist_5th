# 함수 기본 문법
- fn.js 참고
함수 : 어떤 처리를 반복적으로 수행하도록 만든 코드뭉치
함수 잘 만드는 법 : 1가지 일만 하도록 단순하게 만든다
함수 선언 : 이렇게 사용할거야 라고 말하는 것
함수를 만드는 법 :

함수선언문 - 어디서든 호출 가능 (12번 라인인 함수이름();이 function 위에 있어도 사용가능) 
 function 함수이름() {
    console.log("함수 호출")
}
함수이름();
; 만약 console.log()}인 9-11라인 까지만 있었다면
이 친구는 콘솔로그에 찍히기만 하고 값을 반환하지 않았으므로 void함수

함수표현식 - 코드에 도달하면 생성
let 변수 = function(){
    console.log('헬로');
}
변수();


만약,
이름 () => {}
이라면 앞에 const 를 붙여 함수선언 해주면 됨.


const 화살표 함수 () => {}
let add = function(num1, num2){
    return num1 + num2;
}
=
let add =          (num1, num2) => {
    return num1 + num2;
}
=
let add =          (num1, num2) => (
    num1 + num2;
)
=
let add = (num1, num2) => num1 + num2;

만약 let add = function(num1, num2){
     const result = num1 + num2;
     return result;
} 리턴 전에 여러줄의 코드가 있다면 (num1, num2) 뒤에 ()사용 불가능
    let add =          (num1, num2) => {
      const result = num1 + num2;
      return result;
} 이렇게는 가능

만약 인수가 1개라면 let sayHello = (name) => `Hello,${name}`;
name에 있는 () 생략가능

만약 인수가 없는 화살표 함수라면? () 생략할 수 없음
let showError = () => {
    alert('error!');
}
익명함수 : 이름이 없는 함수

콜백함수 : 어떤 함수에 인자로 함수를 전달하는 것 / 순차적으로 실행하고 싶을 때 사용
function first(파라미터){
    파라미터()
}
function second(){

}
first(second)      first함수 안의 코드 실행해주세요. 근데 파라미터 second 집어넣어서요  

# 배열 관련 함수
- fn.js 참고
 
# 비구조화 할당
배열의 각 요소를 변수에 할당할 때 사용
# 구조 분해 할당
객체의 속성 값을 변수에 할당할 때 사용
## 과제
이름 : fn-array
